== Running _compactor_ 

=== Stopping and starting _compactor_  daemon

If _compactor_  was installed from a binary package, then once the
configuration has been set up _compactor_  can be run as a service or daemon.

==== Linux with `systemd`

By default, http://releases.ubuntu.com/16.04/[Ubuntu 16.04 LTS 'Xenial
Xerus'] and later releases use `systemd`.

_compactor_  service is a standard `systemd` service. It can be manually
started, stopped and requested to reload its configuration.

----
# systemctl start dns-stats-compactor
# systemctl stop dns-stats-compactor
# systemctl reload dns-stats-compactor
----

Stopping the service is equivalent to manually interrupting a
capture. See <<Capturing network traffic>>.

Requesting the service reloads its configuration is equivalent to a
manual request for restarting capture. See
<<Restarting capture with modified configuration>>.

[[command-line]]
=== Running _compactor_  from the command line

_compactor_  can be run from the command line to either:

* perform ad-hoc captures from one or more network interfaces, or
* perform ad-hoc captures from DNSTAP, or
* convert already captured PCAP files.

Full details of available command options are in _compactor_  manual page,
*compactor*(1). A summary is available:

----
$ compactor  -h
Usage: compactor  [options] [capture-file ...]
Options:

Command options:
  -h [ --help ]                    show this help message.
  -v [ --version ]                 show version information.
  -c [ --configfile ] arg          configuration file.
  --excludesfile arg               exclude hints file.
  -r [ --report-info ] [=arg(=1)]  report info (config and stats summary) on 
                                   exit.
  -D [ --relaxed-mode ] [=arg(=1)] parse command line allowing 
                                   unrecognized options but warning.
  --debug-dns [=arg(=1)]           print DNS packet details.
  --debug-qr [=arg(=1)]            print Query/Response match details.
  -l [ --list-interfaces ]         list all network interfaces.

Configuration:
  -t [ --rotation-period ] arg (=300)   rotation period for filename based rotation
                                        for all outputs, in seconds.
  -q [ --query-timeout ] arg (=5)       timeout period for unanswered queries, 
                                        in seconds.
...(rest of output omitted for brevity)...
----

Specifying a combination of capture files, network interfaces or DNSTAP capture
on the command line is an error.

[TIP]
====
Options `--debug-dns` and `--debug-qr` output human-readable summary
packet and match data as _compactor_ is running. They are a useful way
to verify operation.
====

==== Capturing network traffic

If at least one network interface is specified
and _compactor_  has permission to read from the network,
_compactor_ will start recording network traffic.

For example, to capture traffic on `eth0` to output `capture.cdns`, capturing all
DNS sections and automatically `xz` compressing the output:

----
$ compactor -x -o capture.cdns -n all -i eth0
----

_compactor_  will capture traffic until interrupted by a signal, for example
the user typing Control-C. If the -r option is used then _compactor_ will report
summary information on exit (configuration and basic statistics).

[WARNING]
====
If C-DNS compression is enabled, interrupting _compactor_ causes the current
compression to be aborted (the '.raw' uncompressed file is retained on disk).
For this reason you are recommended to have C-DNS output file rotation enabled
when using compression. For more details, see <<C-DNS output compression>>.
====

==== Capturing DNSTAP traffic

If a DNSTAP Unix socket is specified, and _compactor_ has permission to create
the socket, and a local nameserver is configured to write DNSTAP to that socket, 
_compactor_ will start recording network traffic via DNSTAP.

For example, to capture traffic on `/run/unbound-dnstap.sock` to output
`capture.cdns`, capturing all DNS sections and automatically `xz` compressing
the output:

----
$ compactor -x -o capture.cdns -n all --dnstap-socket /run/unbound-dnstap.sock
----

_compactor_  will capture traffic until interrupted by a signal, for example
the user typing Control-C. If the -r option is used then _compactor_ will report
summary information on exit (configuration and basic statistics).

[WARNING]
====
If C-DNS compression is enabled, interrupting _compactor_ causes the current
compression to be aborted (the '.raw' uncompressed file is retained on disk).
For this reason you are recommended to have C-DNS output file rotation enabled
when using compression. For more details, see <<C-DNS output compression>>.
====

[WARNING]
====
When capturing traffic over DNSTAP, output of raw or ignored packets to PCAP
is not currently supported. Any related _compactor_ options specified will be ignored.
====

==== Capturing from PCAP files

Unless DNSTAP input files are specified, any non-option parameters on the command
line are assumed to be PCAP files
to be used for input to _compactor_ . In this case, any capture interface specified
in the configuration file is ignored and the PCAP files used as input.

So, to convert input PCAP file `capture.pcap` to output `capture.cdns`, capturing
all DNS sections and automatically `xz` compressing the output:

----
$ compactor -x -o capture.cdns -n all capture.pcap
----

or, using the longer option forms,

----
$ compactor --xz-output --output capture.cdns --include all capture.pcap
----

Some command line options take an optional argument. For example,
`--xz-output` can optionally be followed by an explicit value; if none
is present then `true` is assumed. This does mean that if one of these
options is the last option before the PCAP file arguments, the
compactor can't tell that the PCAP file argument is not a (probably
incorrect) value for the option.

----
$ compactor -o capture.cdns -x capture.pcap
Error: the argument ('capture.pcap') for option '--output' is invalid. Valid choices are 'on|off', 'yes|no', '1|0' and 'true|false'
----

In this case, the option argument must be given explicitly.

----
$ compactor -o capture.cdns -x true capture.pcap
----

==== Capturing from DNSTAP files


If DNSTAP input is specified by using the `-T`/`--dnstap` option,
any non-option parameters on the command line are assumed to be DNSTAP files
to be used for input to _compactor_ . In this case, any capture interface specified
in the configuration file is ignored and the DNSTAP files used as input.

So, to convert input DNSTAP file `capture.dnstap` to output `capture.cdns`, capturing
all DNS sections and automatically `xz` compressing the output:

----
$ compactor -T -x -o capture.cdns -n all capture.dnstap
----

or, using the longer option forms,

----
$ compactor --dnstap --xz-output --output capture.cdns --include all capture.dnstap
----

As with other command line options, `--dnstap`
can optionally be followed by an explicit value; if none
is present then `true` is assumed. This does mean that if it
is the last option before the DNSTAP file arguments, the
compactor can't tell that the DNSTAP file argument is not a (probably
incorrect) value for the option.

----
$ compactor -o capture.cdns -x -T capture.dnstap
Error: the argument ('capture.dnstap') for option '--output' is invalid. Valid choices are 'on|off', 'yes|no', '1|0' and 'true|false'
----

In this case, the `--dnstap` argument must be given explicitly.

----
$ compactor -o capture.cdns -x -T true capture.dnstap
----

==== Network capture permissions

If performing an ad-hoc network capture, _compactor_  must have the necessary
permissions to allow it to capture traffic from the specified network
ports. These permissions are operating system dependent, and a full
discussion is beyond the scope of this guide. The documentation for
the `wireshark` tool provides a good introduction
https://wiki.wireshark.org/CaptureSetup/CapturePrivileges[when
discussing permissions for `dumpcap`]. For the impatient who have the
necessary permission, just run _compactor_  as `root`.

==== DNSTAP capture permissions

When capturing DNSTAP over a socket, _compactor_ is responsible for
the creation of that socket. It will also be necessary to ensure that the
local nameserver has permissions allowing it to write to the socket.

As a convenience, _compactor_ provides options to set the socket
owner, group and write permissions.

* `--dnstap-socket-owner`. Set the socket owner to the named user.
* `--dnstap-socket-group`. Set the socket group to the named group.
* `--dnstap-socket-write`. Give write permission to owner, owner+group or all.

Obviously, _compactor_ must itself have permission to make the changes.

==== Restarting capture with modified configuration

If _compactor_  is performing a capture from the network or from DNSTAP, it is possible to
modify settings in the configuration file and have _compactor_  re-read the
configuration file. To do so, send the `HUP` signal to the _compactor_  process.
This will stop the current capture, re-read the configuration file, and restart
capture.

NOTE: Any options given on the command line will still be applied for
the restarted capture, and will still over-ride any configuration file value
for those options.

The process of stopping the current capture, re-reading configuration
and restarting capture will mean that _compactor_  will miss some
traffic. The amount of time taken to stop, write queued data
and then restart is heavily dependent on the load on the network at
the time.

If you send a `HUP` signal to _compactor_  while it is doing a capture
from a file rather than a network capture, the conversion is stopped
immediately and _compactor_  exits.

[WARNING]
====
If compression of C-DNS output is enabled, a `HUP` signal to
_compactor_ during a capture from a PCAP file have the same effect as
interrupting _compactor_, so the current C-DNS output is lost. See
<<C-DNS output compression>> for details.
====

==== Configuration file

Remember that when _compactor_  is installed, either using a binary package
or using the source distribution, a configuration file is installed with sample
settings. The sample file specifies output file paths, `xz` compression on
C-DNS output and all sections to be captured.

Any setting given on _compactor_  command line automatically over-rides
any value for that setting in the configuration file.

The *-c, --configfile* command line option over-rides the default configuration
file location. If not using an alternate configuration file, but specifying all the
compactor options from the command line, it may be wise to explicitly give
`/dev/null` as the configuration file, to ensure that no values from the installed
configuration file are used.

=== _compactor_  log messages

_compactor_  logs some messages to the system log. There are error messages,
reporting an error within _compactor_ , and also some informational
messages.

[cols="1,2,3",options="header"]
|===
| Log type
| Message
| Comment

| ERROR
| Dropping on these channels: Sniffer Matcher C-DNS 
| Packets are arriving faster than _compactor_  can
process them, so packets are being dropped internally on the specified
channels. More information is available via the *--log-network-stats-period* logging output.

| ERROR
| Dropping on these channels: Ignored-PCAP
| More ignored packets - that is, packets that do not appear to be DNS
related or which are malformed - are arriving than can be processed
and recorded to the ignored PCAP output. At least one has been
dropped.

| ERROR
| Dropping on these channels: Raw-PCAP
| More input packets are arriving than can be processed and recorded
to the raw PCAP output. At least one has been dropped.

| WARNING
| Sampling mode switched on for 100s with rate of 1 in 10
| Drops on at least one internal channel are occurring at a rate higher
than specified by the *--sampling-threshold* option so sampling is enabled.

| WARNING
| Sampling mode extended as drops still occurring
| Drops above the threshold level are still occurring after the specified
*--sampling-time* period.

| WARNING
| Sampling mode switched off because time limit expired and not dropping above threshold
| Drops are now below the sampling threshold and so sampling is disabled after the specified
time limit. 

| WARNING
| Aborting compression of <file>
| On an interrupt of kill of the process, all in progress C-DNS file compression is
  aborted. However the '.raw' (uncompressed) file is left on disk. 

| INFO
| Total packet count, etc.
| Basic statistics on the ongoing network capture requested by the
*--log-network-stats-period* option (see below).

| INFO
| Starting network capture
| _compactor_  is starting a network capture.

| INFO
| Rotating file to <filename>
| _compactor_  is rotating the current collection file to the named file.

| INFO
| Re-reading configuration
| _compactor_  has received a `HUP` signal and is re-reading its configuration.

| INFO
| Signal handler: Received - <signal>
| _compactor_  has received a signal.

| INFO
| Collection interrupted
| _compactor_  has received a signal requesting termination and is
  stopping collection.
|===

Other error messages are reporting an internal error.

Example statistics produced by enabling the *log-network-stats-period* option:

----
*Stats interval: average rate           1896 pps  over  1s
 LIBPCAP : recv/OS drop/IF drop         1896/         0/         0
 Sniffer : recv/dropped/queue           1896/         0/         1
 Matcher : recv/dropped/queue           1896/         0/         0
 CDNS    : recv/dropped/queue           1896/         0/         0
 CDNS out: writ/% traffic               1896/       100/          
 PCAP out: raw drop/ignored drop           0/         0/

----

These statistics provide detail about the internal components of compactor that
may need to drop packets under heavy load. If sampling is enabled, an additional 
line outputs data on sampling:

----
 Sampling: recv/discard/state            1896/         0/       OFF
----

Note that the LIBPCAP statistics provided here are information only and may not be
reliable, particularly at high load.

Additional file handling messages can be output by enabling the *--log-file-handling*
option. This allows detailed debugging of file processing problems and also 
measurements of file compression times.

=== _compactor_  performance considerations

==== Threading

_compactor_ is multi-threaded. Packet parsing and query/response
matching happens on the main thread, while separate threads are
used for packet capture, to write C-DNS, raw PCAP and ignored PCAP
outputs.

If `xz` or `gzip` compression is requested for C-DNS, that compression
happens in one or more further threads as described below.
`xz` or `gzip` compression in PCAP
outputs remains in the PCAP output thread because the PCAP format is
very simple and requires minimal processing overhead. C-DNS, on the
other hand, requires non-trivial processing to perform the data
de-duplication before proceeding to general purpose compression.

Data is passed between threads using queues with maximum length. If the
rate of incoming data overwhelms a thread and it can't keep up, the data
is discarded and the discard recorded. As data rates rise, therefore, the
compactor will keep running but more and more queries will not be
processed correctly.

IMPORTANT: By default, installing _compactor_  via a binary package and running
it as a service restricts _compactor_  to using just one physical
core. Increasing the number of cores available may, depending on the
configuration, increase the maximum throughput of _compactor_ .

===== C-DNS output compression

The processed used for C-DNS compression is designed for a scenario where
_compactor_ is outputting data to a C-DNS file that is periodically rotated; that is,
the existing output file is closed and a new output file with a distinct name is started.
C-DNS output is first written uncompressed to a '.raw' temporary output file. When the file is
complete, either at the end of input from a PCAP file being converted, or after a file
rotation, a new thread is spawned to compress the temporary output file to the final
compressed C-DNS file. If strong compression is being used, the compression may
not finished before the next output file is ready for compression, so it may be necessary
to have two or more compression threads executing simultaneously to keep up. The
maximum number of compression threads that may be active at any time is set in
configuration; if the limit is reached, C-DNS output blocks until one of the compression
threads finishes.

Detailed logs of file processing can be enabled with the *--log-file-handling* option.

[WARNING]
====
If _compactor_ is interrupted, e.g. by the user typing Control-C or the service
being restarted, the C-DNS output is stopped and all compressing threads are
requested to abort. In this case all incomplete compressed output files are
deleted, but the temporary uncompressed files are retained (alongside the
completed compressed files). The files will have a `.raw` extension and can be
renamed and compresses manually. Since these files are uncompressed and could
be large, users should choose how to manage such files.

This behaviour was changed in 1.2.1. Prior to that all in progress output files
were removed on interrupt.
====

[WARNING]
====
If the _compactor_ is listening on an interface where the DNS traffic
is very low or stops for some reason then output files may 
not get rotated and/or compressed until a) in the case of the CDNS output 
another DNS packet is seen or b) in the case of PCAP output any packet is seen.

Alternatively a C-DNS file rotation can be forced by sending a SIGUSR1 to
`compactor`, however it is recommended to either 

. rely on just the file rotation configuration parameters OR 
. to override the internally triggered rotation with an external signal sent at
a period much shorter then the file-rotation-period (which defaults to 300s)

The second mechanism must be used with care to avoid a race condition because
the internal triggering cannot currently be disabled if the filename contains a
timestamp. The file rotation mechanism is under review and may be further
updated in a coming release.

====

If _compactor_ is requested to reload its configuration via `HUP`
signal, existing compression threads are not affected.

Note that if PCAP compression is specified, PCAP files are compressed as they
are written (not via a two-stage processes as above). On interrupt these files
are simply closed.

[[runninginspector]]
== Running _inspector_

_inspector_ is run from the command line to convert C-DNS from one or more
C-DNS file to either

* PCAP format (the default) or
* text output based on a template file specifying the output for each query/response record.

Each output file may be accompanied by a text `info` file giving basic
information on the C-DNS file contents (configuration and basic
statistics).  Alternatively just the `info` file can be output with no
output files.

IMPORTANT: `info` files are not part of the C-DNS specification. Their
contents are specific to this implementation, and are subject to
change.

Bulk processing can be achieved by writing a custom script to use _inspector_
to process the C-DNS files as needed.

Full details of available command options are in the _inspector_ manual page,
*inspector*(1). A summary is available:

----
$ inspector -h
Usage: inspector [options] [cdns-file [...]]
Options:
  -h [ --help ]                         show this help message.
  -v [ --version ]                      show version information.
  --defaultsfile arg (=@ETCPATH@/dns-stats-compactor/default_values.conf)
                                        default values file.
  -o [ --output ] arg                   output file name.
  -F [ --output-format ] arg            output format. 'pcap' (default) or
                                        'template'.
  -t [ --template ] arg                 name of template to use for template
                                        output.
  -V [ --value ] arg                    <key>=<value> to substitute in the
                                        template. This argument can be
                                        repeated.
  -g [ --geoip-db-dir ] arg (=@VARLIBPATH@/GeoIP)
                                        path of directory with the GeoIP
                                        databases.
  -z [ --gzip-output ]                  compress output data using gzip. Adds
                                        .gz extension to output file.
  -y [ --gzip-level ] arg (=6)          gzip compression level.
  -x [ --xz-output ]                    compress output data using xz. Adds .xz
                                        extension to output file.
  -u [ --xz-preset ] arg (=6)           xz compression preset level.
  -q [ --query-only ]                   write only query messages to output.
  -r [ --report-info ]                  report info (config and stats summary)
                                        on exit.
  -D [ --relaxed-mode ]                 parse command line allowing 
                                        unrecognized options but warning.
  -N [ --no-output ]                    do not output PCAP or template files,
                                        only ancillary files, e.g. info files,
                                        for each input.
  -O [ --no-info ]                      do not output info files.
  -X [ --excludesfile ]                 generate excluded fields files for each
                                        input.
  -S [ --stats ]                        report conversion statistics.
  -k [ --pseudo-anonymisation-key ] arg pseudo-anonymisation key.
  -P [ --pseudo-anonymisation-passphrase ] arg
                                        pseudo-anonymisation passphrase.
  -p [ --pseudo-anonymise ]             pseudo-anonymise output.
  --debug-qr                            print Query/Response details.
----

For example, to generate PCAP output corresponding to the DNS traffic
in `capture.cdns`, and automatically `xz` compressing the output:

----
$ inspector -x -o capture.pcap capture.cdns
----

This generates a compressed PCAP output file,  `capture.pcap.xz`. It also
generates `capture.pcap.info`.

NOTE: The -q option will only write DNS queries to the output PCAP file.

[#default_values]
=== _inspector_ *default_values* file

From version 1.0 and later most fields in C-DNS are optional (earlier versions
always capture a minimum set of fields). See the <<excludes>> and the deprecated
<<options>> setting for _compactor_ for more details. When converting C-DNS to
PCAPs or templated text output it may be necessary or desirable to fill in those
omitted fields with default values in a way that was not necessary with earlier
versions. Such fields are specified in the *default_values* file.

==== PCAP generation

The PCAP format requires that certain IP, transport information and basic DNS
message contents be present in order for a packet to be considered valid. (Note
that only the contents of well-formed DNS messages are captured in the
structured C-DNS format used by the DNS-STATS compactor even if not all the data
is captured. Whilst the 1.0 C-DNS format supports capture of malformed messages
this is not yet implemeted in the DNS-STATS compactor.)

In order for the _inspector_ to always be able to generate sane PCAP files from
C-DNS with any set of *excluded_fields* a *default_values* file must be present
and must contain the full set of required default values. If this file is not
present or doesn't contain the required default values _inspector_ will exit
with an error.

NOTE: The default values are _only_ used if the data field is not present in a
particular query/response record, they _never_ override data stored in the
C-DNS file.

===== Interoperability

A subtlety of the way optionality is specified in the C-DNS format is that even
if a field is not 'excluded' in the configuration of the collecting application,
it is still not _guaranteed_ to be present. For example, a collecting
application in another deployment scenario may not have access to the
client-hoplimit. Also, in priciple, the presence of a particular field can vary
at the individual query/response record level, not just the file level.

Therefore, for maximum interoperability, the *default_values* file is _required_
in this release for PCAP regeneration. Its use means that as long as the file is
present, a C-DNS file can be processed in its entirety to produce output without
failure. Otherwise the absence of a particular field on any single record could
cause an error in processing the entire file.

Future releases are likely to include options to allow override of requiring
this *default_values* file or for such incomplete records to be ignored in file
processing.

===== Corner cases

Whilst the use of *default_values* will produce a 'valid' PCAP file (e.g. one
that can be loaded into a processing application such as Wireshark) this does
not guarantee that for all permutations *excluded_fields* and *default_values*
the packets in the file will form a coherent traffic flow with fully
reconstructed DNS messages. See the following sections for more details on
specific default values and <<reconstructed_pcap_files>> for more general issues
with PCAP reconstruction.

==== Template based text output

Since the templated text based output is defined via a template the user should
carefully consider which specific defaults to provide to create the required
output. For this reason the *default_values* is not a mandatory requirement in
this processing flow.

==== *Default_values* file location

On startup, _inspector_ looks for a *default_values* file. By default this is named `default_values.conf` and is located in a `dns-stats-compactor` system configuration directory. A different location can specified on the command
line by using the _inspector_ --defaultsfile option.

If installed from a binary package on Linux, a default values file will be at
`@ETCPATH@/default_values.conf`.

==== Default configuration

The `default_values.conf` file looks like this

----
include::default_values.conf[]
----

The comments on each line show the format of, and in some cases the set of, allowed values. For example to set a default for dns-flags you could edit the file to say:
----
dns-flags=query-rd response-ra
----

==== Notes on specific default values

Some details on default values and resulting PCAP files:

* `dns-flags` is the only default that can have no value specified in order to set all flags to 0. It is also the only default that can have multiple values.
* No defaults are provides for excluded RDATA fields since there is no suitable general default (the content is type specific). If the RDATA field was excluded on capture the RDATA field will be empty in the resulting PCAP.
* If the time-offset was excluded on capture then using the default value (0s) will result in all the query (Q/R=0) traffic having the same timestamp. A similar result occurs for response traffic if the response-delay was excluded on capture.
* Using default timestamps or port numbers can result in traffic flows that are hard to interpret or appear inconsistent, particularly for TCP traffic.
* A corner case exists where so little data was captured in a record that the _inspector_ cannot determine if a query and/or response was captured. In this case the _inspector_ defaults to generating a query.

A more detailed discussion of the issues around C-DNS to PCAP reconstruction can be found in Section 6.2.1, Section 9 and Appendix D of https://tools.ietf.org/html/rfc8618[RFC8618].

==== Combining *excluded_fields*, *default_values* and pcap-filters

Some further subtleties of optionality involve processing of responses. For example, the PCAPs reconstructed by processing C-DNS files captured with the following *exclude_fields*:
----
response-delay
response-rcode
response-answer-sections
response-authority-sections
response-additional-sections
----

will be different to using the following pcap filter:
----
filter=dst host <serverIP>
----
This is because in the first case _compactor_ records that it saw a response, even though it doesn't record anything about the response content. It will therefore attempt to reconstruct a response in the PCAP file using the *default_values* (unless the -q option is used). In the latter case _compactor_ never saw the response, records that one was not present and does not attempt to reconstruct one.

=== Templated text output

By default, _inspector_ converts input C-DNS to PCAP. Alternatively, though, it
can be used to convert input C-DNS to text output based on a text template file.

==== Template format

===== Template data items

The text in the template file specifies what should be output for each query/response
record in the C-DNS file. Any items in the template enclosed in double braces,
known as template markers e.g. `{{NAME}}`,  are replaced with a value `NAME` from
the query/response (QR) item. Marker values may also be specified on the command
line.

A full list of query/response template markers is given in
the _inspector_ manual page, *inspector*(1). The following table gives a selection
of common markers:

[cols="1,3"]
|===
| `client_address`
| IP address of client as raw bytes, 4 for IPv4, 16 for IPv6.

| `client_port`
| Port used by client.

| `server_address`
| IP address of server as raw bytes, 4 for IPv4, 16 for IPv6.

| `server_port`
| Port used by server.

| `client_hoplimit`
| Value of query client hoplimit. Blank if no query.

| `id`
| Query ID, or response ID if no query.

| `query_name`
| QNAME in first Question. Blank if no question.

| `query_type`
| QTYPE in first Question. Blank if no question.

| `query_response_has_query`
| 1 if QR contains a query, otherwise 0.

| `query_response_has_response`
| 1 if QR contains a response, otherwise 0.

| `query_response_query_has_question`
| 1 if QR contains a query which has a question, otherwise 0. Blank if no query.

| `response_rcode`
| Value of response RCODE. Blank if no response.

| `response_delay_nanosecs`
| Nano-seconds between query and response timestamps. 0 if no query or no response.

| `timestamp_secs`
| QR timestamp seconds since epoch.

| `timestamp_microsecs`
| QR timestamp micro-seconds since epoch.

| `timestamp_nanosecs`
| QR timestamp nano-seconds since epoch.

| `transport_ipv6`
| 1 if the IPv4 used, 0 if IPv4.

| `transport_tcp`
| 1 if the transport used was TCP, 0 if UDP.
|===

===== Template marker modifiers

The text substituted into a template marker may be modified by a marker modifier.
A marker modifier is a filter that is applied when the template is expanded and
modifies the value of the marker before it is output. Modifiers are specified by
following the marker name with a colon and the modifier name,
e.g. `{{client_address:x-ipaddr}}`.

There is a selection of marker modifiers useful for C-DNS.

[cols="1,6"]
|===
| `x-cstring`
| Output binary input data using C string style escapes,  e.g. `Hello, world\n\0`.  Non-printable characters without a defined  escape are output as `\xaa`.

| `x-csvescape`
| Output input data escaping for use with CSV as described in https://tools.ietf.org/html/rfc4180[RFC4180], e.g. `"Hello, ""quotes"""`.

| `x-hexstring`
| Output binary input data as hex characters. A 0 byte is output as `\0`, all other values as `\xaa`.

| `x-ipaddr`
| Output text representation of a IPv4 or IPv6 address, depending on whether  filter input was 4 or 16 bytes.

| `x-ip6addr`
| Output IPv4 or IPv6 address as the IPv6 printable address representation. IPv4  addresses are output as `::ffff:192.0.2.25`.

| `x-ip6addr-bin`
| Output IPv4 or IPv6 addresses as a 16 byte binary IPv6 address. IPv4 addresses  are output as `0x00000000000000000000ffffc0000219`.

| `x-date`
| Output timestamp in seconds as a date in ISO601 format (YYYY-MM-DD).

| `x-datetime`
| Output timestamp in seconds as a date and time in ISO601 format (YYYY-MM-DD HH:MM:SS).
|===

==== Template example

The following template file `test.tpl` outputs a UTC timestamp, a node identifier
(supplied outside C-DNS), the client address and client port and the query name
in one query/response as a single record in comma-separated value format (CSV).

----
{{timestamp_secs:x-datetime}},{{node}},{{client_address:x-ipaddr}},{{client_port}},{{query_name:x-csvescape}}
----

When run with input C-DNS file `input.cdns` using this command line, it produces
the illustrated sample output:
----
$ ./inspector -o - -F template -t ./test.tpl --value node=42 ./input.cdns
2018-02-07 12:38:10,42,173.253.104.205,37529,www.haokan.party.local
2018-02-07 12:38:10,42,19.134.250.211,36396,"36.5.84.123, 10.121.88.32, 10.121.87.219"
2018-02-07 12:38:10,42,242.68.160.159,50139,nllczxstbgfa.local
----

=== Pseudo-anonymised output

_inspector_ output may be optionally pseudo-anonymised (see
<<pseudoanonymisation, Appendix A>> for a full description). 

Briefly, this means that client and server IP addresses in PCAP or templated text
output are pseudo-anonymised, as are all IP addresses in counts of events recorded.
IP addresses in data returned from server to client are not anonymised. Client IP
address information sent from the client is pseudo-anonymised provided it occurs
in locations prescribed in DNS standards.

Pseudo-anonymisation of an IP address takes the original address and
passes it through an encoding mechanism to generate a different address.
The technical details of the the current implementation are described in
<<pseudoanonymisation, Appendix A>>.

NOTE:  Pseudo-anonymisation is currently an experimental feature.
The pseudo-anonymisation services provided and
the details of the mechanism used are subject to change.

[#reconstructed_pcap_files]
=== Reconstructed PCAP files

The PCAP files generated from C-DNS are not an exact reproduction of
the original capture, mostly due to limitations in the C-DNS format itself.

* Link information below the IP layer is not preserved. An Ethernet
  wrapper is generated for the packets, but MAC addresses are not
  preserved.
* Queries and responses over TCP will be generated as a TCP stream,
  but the stream details will not be exactly reproduced.
* Some effort is made to ensure that label compression matches the
  original, but the details of compression are not recorded in C-DNS
  and so the match is not perfect. For https://www.knot-dns.cz/[Knot]
  and https://www.nlnetlabs.nl/projects/nsd/[NSD] nameservers, the
  error rate is typically in the region of 0.1%. Mismatches are reported as
  'REGENERATION ERRORS' in the `info` file.
* IP fragmentation is not preserved.
* If the original C-DNS did not record all DNS message sections, these
  obviously will not be reproduced.
* Surplus data at the end of a message is not recorded. A count is
  kept of the number of original packets with surplus data.

=== Stored address prefix lengths

_compactor_ C-DNS output may optionally store IP address prefixes rather
than the full address when record address events or query/responses. Depending
on the capture environment, this may serve to reduce the size of the C-DNS capture.

Separate prefix lengths may be given for client and server addresses. Client
addresses are sender addresses on queries and recipient addresses on
responses. Server addresses are the reverse; recipient addresses on queries
and sender addresses on responses.

The prefix is the number of bits of the address to be stored. Seperate prefixes
must be specified for IPv4 addresses and IPv6 addresses. Set prefix lengths using
_compactor_ configurations `client-address-prefix-ipv4`,
`client-address-prefix-ipv6`, `server-address-prefix-ipv4` and
`server-address-prefix-ipv6`.

When storing the addresses, _compactor_ sets all the address bits after the prefix
length to 0, and does not store trailing 0 bytes in the address. So, for example,
specifying an IPv6 prefix of 64 will store only the first 8 bytes of the address,
rather than the full 16 bytes. Not only does this halve the storage requirement for
the address, but it increases the chances of the address being re-used in
subsequent records, as only the prefix bits of the address have to match an
already-stored address.

=== _inspector_ limitations

The design of C-DNS allows blocks with different storage and collection parameters
to be present in the same C-DNS file. This might arise when two separate C-DNS
files are merged.

At the time of writing, no tool exists to do this. _inspector_ has not been tested on
such inputs, and may not exhibit correct behaviour if presented with such a file.
At the time of writing, _inspector_ will only display configuration and storage
hints from the first set of parameters in the file.

=== _compactor_/_inspector_ `info` output

A typical `info` file is as follows. The report begins with
information on _compactor_  configuration used to capture the data.

----
CONFIGURATION:
  Query timeout        : 5 seconds
  Skew timeout         : 10 microseconds
  Snap length          : 65535
  DNS port             : 53
  Max block items      : 5000
  Promiscuous mode     : Off
  Capture interfaces   :
  Server addresses     :
  VLAN IDs             :
  Filter               :
  Query options        : Extra questions, Answers, Authorities, Additionals
  Response options     : Extra questions, Answers, Authorities, Additionals
  Accept OPCODEs       : QUERY, IQUERY, STATUS, NOTIFY, UPDATE, DSO
  Accept RR types      : A, NS, MD, MF, CNAME, SOA, MB, MG, MR, NULL_R, WKS, PTR, HINFO, MINFO, MX, TXT, RP, AFSDB, X25, ISDN, RT, NSAP, NSAP_PTR, SIG, KEY, PX, GPOS, AAAA, LOC, NXT, EID, NIMLOC, SRV, ATMA, NAPTR, KX, CERT, A6, DNAM, SINK, OPT, APL, DS, SSHFP, IPSECKEY, RRSIG, NSEC, DNSKEY, DHCID, NSEC3, NSEC3PARAM, TLSA, HIP, NINFO, RKEY, TALINK, CDS, SPF, UINFO, UID, GID, UNSPEC, NID, L32, L64, LP, EU148, EUI64, TKEY, TSIG, IXFR, AXFR, MAILB, MAILA, TYPE_ANY, URI, CAA, TA
----

There follows information on the program used to created the C-DNS and the
host on which it was running.

----
COLLECTOR:
  Collector ID         : dns-stats-compactor 1.1.0
  Collection host ID   : capturehost
----

After that, the `info` file gives time information on the capture. The `Earliest data` and the
`Latest data` are the timestamps of the earliest and latest query/response pairs in the
file. The reported `Data range` is the time between `Earliest data` and `Latest data`.

----
TIMES:
  Collection started   : 2020-11-02 17h07m49s632204us UTC
  Earliest data        : 2020-11-02 17h07m49s632204us UTC
  Latest data          : 2020-11-02 17h07m59s637124us UTC
  Collection ended     : 2020-11-02 17h08m23s709295us UTC
  Data range           : 10s4920us
  File duration        : 34s77091us
----

When recording traffic from a network interface, _compactor_ records
the time recording started as the `Collection started` time. When
rolling over to a new file during recording, the timestamp of the data
that causes the rollover is recorded as the `Collection started` time
in the new file. Similarly, when recording is stopped, the time is
recorded as the `Collection ended` time. When rolling over to a new
file during recording, the timestamp of the data that causes the rollover is recorded
as the `Collection ended` time in the old file.

If `Collection started` and `Collection ended` times are available,
the time between them is reported as the `File duration`.

If C-DNS is produced directly from a PCAP file, _compactor_ cannot know what time
the recording started or ended, so no `Collection started` or `Collection ended`
times are recorded or reported and therefore no `File duration` is reported.

NOTE: Recording the `Collection started` and `Collection ended` times is
a _compactor_ extension to the C-DNS RFC format.

Then follows some overall statistics on the capture.

----
STATISTICS:
  Total Packets received                   : 17493
  Dropped packets at sniffer    (overload) : 0
  Total Packets processed                  : 17493
  Dropped Matcher messages      (overload) : 0
  Discarded C-DNS messages      (sampling) : 0
  Processed DNS messages           (C-DNS) : 16529
  Matched DNS query/response pairs (C-DNS) : 8263
  Unmatched DNS queries            (C-DNS) : 2
  Unmatched DNS responses          (C-DNS) : 1
  Discarded OPCODE DNS messages    (C-DNS) : 0
  Malformed DNS messages           (C-DNS) : 2
  Non-DNS packets                          : 161
  Out-of-order DNS query/responses         : 0
  Dropped raw PCAP packets      (overload) : 0
  Dropped non-DNS packets       (overload) : 0

PCAP STATISTICS:
  Packets received               (libpcap) : 17493
  Packets dropped at i/f         (libpcap) : 0
  Packets dropped in kernel      (libpcap) : 0
----

NOTE: The above counts are based on traffic as reported to _compactor_ by the
underlying _libpcap_ library. When under load, this may not reflect actual traffic.

When processing from capture files, the `PCAP STATISTICS` will all be 0.

And finally counts of occurrences of various events recorded, and associated
addresses.

----
TCP RESETS:
  Count:     1  Address: 3502:e3d3:b836:2ec5:5f1e:98ee:38d8:5cba

ICMP DEST UNREACHABLE:
  Code:  1  Count:     3  Address: 57.98.199.98
  Code:  3  Count:     1  Address: 46.119.7.172
  Code:  3  Count:     1  Address: 158.99.9.124
  Code:  3  Count:     1  Address: 185.158.213.169
  Code:  3  Count:     1  Address: 192.168.59.90
  Code:  3  Count:     1  Address: 214.214.142.170
  Code:  3  Count:     2  Address: 180.243.253.249
  Code:  3  Count:     3  Address: 39.161.250.99
  Code: 13  Count:     4  Address: 215.101.68.68

ICMPv6 DEST UNREACHABLE:
  Code:  1  Count:     4  Address: 3923:96a5:46df:bd71:e9eb:6464:e35:795
  Code:  1  Count:     7  Address: 3923:96a5:46df:bd71:d2ea:2443:527f:55df
  Code:  4  Count:     3  Address: 210a:3c44:990b:d1f0:42a9:bc3f:63e1:240a

====================

REGENERATION ERRORS:
  Incorrect wire size: 11 packets
----
