== Configuring

Many _compactor_ settings for capturing and storing traffic can be set
using the _compactor_ configuration file. Additionally, binary package
installations of _compactor_ install support for running the
compactor as a daemon, and these typically restrict the system
resources available to _compactor_ .

_inspector_ configuration is discussed in the <<runninginspector>> section.

include::compactor-command-options.adoc[]

=== _compactor_ configuration file

==== Configuration file location

On startup, _compactor_ attempts to read a configuration file. By
default this is named `compactor.conf`, and is located in a
`dns-stats-compactor` system configuration directory.

If installed from a binary package on Linux, the configuration file
will be at `@ETCPATH@/compactor.conf`.

An alternate path for the configuration file can be specified to the
compactor using the *-c, --configfile* command line option.

===== Default configuration

Both installing via binary packages and installing using the source distribution
will install a `compactor.conf` configuration
file. This needs to be edited to specify an interface to collect from,
but is otherwise configured to collect traffic:

* Recording all DNS additional sections
* Writing C-DNS output compressed with `xz` compression
* Naming output files named with the date, time, rotating period and capture interface.
* A new output file is commenced every 5 minutes.
* The 'raw' traffic is also recorded to a PCAP output file
* The 'ignored' traffic is also recorded to a PCAP output file
* The output files are stored under `@VARLIBPATH@/dns-stats-compactor`
in subdirectories `cdns`, `pcap/raw` and `pcap/ignored`.

All configuration items can also be specified on the command line.

IMPORTANT: If an option appears in the configuration file and on the command line, the
command line setting overrides the configuration file.

NOTE: On the command line, configuration options may be specified in short and long
forms. In a configuration file, the long form of the option name must be used. So, for
example, to set the snap length to 64, the configuration file entry must read
`snaplen=64`. `s=64` will not be accepted.

==== Configuration file format

A configuration file is a plain text file with lines in the form `option=value`. A `#`
character introduces a comment that spans until the end of the line. To illustrate,
here is the default configuration file:

----
include::compactor.conf[]
----



==== Configuration options

include::compactor-capture-from-network.adoc[leveloffset=+1]

include::compactor-capture-from-dnstap.adoc[leveloffset=+1]

include::compactor-outputs.adoc[leveloffset=+1]

include::compactor-query-response-matching.adoc[leveloffset=+1]

===== Output file patterns

Output files, C-DNS and PCAP, are named using output file
patterns. These are made up from a directory path and an output
filename. So, for example, a PCAP output file might be named
`/tmp/pcap/output.pcap`. In this example, `/tmp/pcap/` is the
directory path, and `output.pcap` is the output filename.

Output filenames can contain expansion patterns. Expansion patterns
are introduced by a `%` character, and are of two basic types, time
expansions and configuration expansions.

[cols="2*"]
|===
| `%` followed by a single letter
| Insert a time expansion.

| `%{name}`
| Insert the current value of the configuration item `name`

| `%%`
| Insert a single `%` in the output filename.
|===

The full list of letters available in the time expansion, and what
they expand to, is in the *strftime*(3) manual page. Some of the
commonly used ones are given below, with expansions for a date and
time of Monday January 16th 2017 at 13:18:05.

[cols="1,3,1"]
|===
| `%y`
| The year, not including the century.
| `17`

| `%Y`
| The year, including the century.
| `2017`

| `%C`
| The century part of the year.
| `20`

| `%m`
| The month as  a decimal number (01-12).
| `1`

| `%d`
| The day of the month as  a decimal number (01-31).
| `16`

| `%w`
| The day of the week as  a decimal number (0-6). Sunday is 0.
| `1`

| `%W`
| The week number (00-53).
| `03`

| `%H`
| The hour (24-hour clock) as a decimal number (00-23).
| `13`

| `%M`
| The minute as a decimal number (00-59).
| `18`

| `%S`
| The second as a decimal number (00-59).
| `05`
|===

Not all configuration items can be used in a configuration expansion. The
items that can be used are as follows.

[cols="1,3,1"]
|===
| `%{interface1}`
| The name of the first configured interface. `interface2` gives the second
interface, `interface3` the third and so on.
| `eth0`

| `%{interface}`
| The names of all configured network interfaces separated by `-`, or `dnstap`
  if capturing with DNSTAP.
| `eth0-eth1`

| `%{rotate-period}`
| The file rotation period used when file names contain time/date elements, in seconds.
| `300`

| `%{snaplen}`
| The network capture snap length.
| `65535`

| `%{query-timeout}`
| The query timeout, in seconds. If no response to a query arrives by the timeout,
the query is treated as unanswered.
| `5`

| `%{skew-timeout}`
| The skew timeout, in microseconds. If a response arrives without a query, it is
held for the timeout period to see if a query arriving just after matches.
| `10`

| `%{promiscuous-mode}`
| Outputs `1` if the network interfaces are in promiscuous mode, `0`
otherwise.
| `true`

| `%{vlan-id1}`
| The ID of the first configured VLAN. `vlan-id2` gives the second
configured VLAN ID, `vlan-id3` the third and so on.
| `eth0`

| `%{vlan-id}`
| The IDs of all configured VLANs separated by `-`.
| `10-12`
|===

Example:

*output*=_PATTERN_::
  Use _PATTERN_ as the template for the file path for the C-DNS output files. If no output
  pattern is given, no output is written.

[source,ini]
----
output=/tmp/cdns/%Y%m%d-%H%M%S_%{rotate_period}_%{interface}.cdns
----

Using the above date and time, a rotation period of 300s and
collecting from interfaces `eth0` and `eth1` this will write to
`/tmp/cdns/20170116-131805_300_eth0-eth1.cdns`.

[[options]]
===== C-DNS options

*include*=_SECTIONS_:: Indicate which optional sections should be
  included in the C-DNS output. This argument can be given multiple
  times. If no include is specified then none of these optional sections are included.

IMPORTANT: The use of *include* lines is deprecated in v1.0 and will be removed in a future major release.
The functionality to control what data is captured has moved to the new *excluded_fields* file. See <<excludes>>.

[cols="2*",options="header"]
|===
| Section name
| Description

| query-questions
|   Include second and subsequent QUESTION sections from queries. The first
  QUESTION section is always recorded.

| query-answers
|  Include ANSWERS data from queries.

| query-authority
| Include AUTHORITY data from queries.

| query-additional
| Include ADDITIONAL data from queries.

| query-all
| Include all sections from queries.

| response-questions
| Include second and subsequent QUESTION sections from responses. The first
  QUESTION section is always recorded.

| response-answers
| Include ANSWERS data from responses.

| response-authority
| Include AUTHORITY data from responses.

| response-additional
|  Include ADDITIONAL data from responses.

| response-all
| Include all sections from queries.

| all
| Include all sections from both queries and responses.

|===

[source,ini]
----
include=all
----

[[excludes]]
=== _compactor_ *excluded_fields* file

The *excluded_fields* file replaces the deprecated *include* functionality
currently found in the configuration file. By default in v1.0 this file is not
used, the deprecated *include* functionality is still used for backwards
compatibilty.

IMPORTANT: Users must use either the deprecated *include* configuration options
or the new *excluded_fields* file. They cannot be combined. If the
*excluded_fields* file exists AND there are *include* lines in the configuration
file (or provided on the command line) an error will be logged and _compactor_
will exit.

If the *excluded_fields* file does exists the _compactor_ will act as if
*include=all* was present. The *excluded_fields* file then controls what fields
are *excluded* from the C-DNS output. Uncommenting a field leads to it being omitted from the capture.

NOTE: The *excluded_fields* are stored in the C-DNS file as 'StoreageHints' for _inspector_ to use when processing C-DNS file, see Sections 6.2.1 and 7.3.1.1.1.1 in https://tools.ietf.org/html/rfc8618[RFC8618] for more details. 

==== *Excluded_fields* file location

On startup, _compactor_ looks for a *excluded_fields* file named
`excluded_fields.conf` located in a `dns-stats-compactor` system configuration
directory. A different file name and location can specified on the command line 
by using the _compactor --excludesfile_ option.

==== Default configuration

By default only a sample *excluded_fields* file is provided.
If installed from a binary package on Linux, the file will be at
`@ETCPATH@/excluded_fields.conf.sample`.

This file (with the .sample extension removed) can be used to specify which
fields are to be excluded from the C-DNS capture (assuming the *include* option
is not used). In the sample all the fields are commented out so all fields
would be collected in the C-DNS capture, which gives the same behaviour as *include=all*.

The fields are specified in logical groups. 

----
include::excluded_fields.conf.sample[]
----

==== Other configurations
As previously noted, excluding some data could have implications for PCAP
regeneration, see <<default_values>>. The following is a suggested
*excludes_fields* file which results in the smallest capture files where the
goal is to be able to reasonably reconstruct just queries in a PCAP (when
using the _inspector_ with the -q option). Capturing less data will require
populating the PCAP with default values for some fields.

----
[ip-header]
# time-offset
response-delay
# client-address
# client-port
# client-hoplimit
# server-address
# server-port
# qr-transport-flags

[dns-header]
# transaction-id
# query-opcode
# query-rcode
# dns-flags
response-rcode
query-qdcount
query-ancount
query-arcount
query-nscount

[dns-payload]
# query-name
# query-class-type
# rr-ttl
# rr-rdata
# query-udp-size
# query-opt-rdata
# query-edns-version
# query-question-sections
# query-answer-sections
# query-authority-sections
# query-additional-sections
response-answer-sections
response-authority-sections
response-additional-sections

[dns-meta-data]
query-size
response-size
qr-sig-flags

[storage-meta-data]
address-events
----

A more detailed discussion of the issues around C-DNS to PCAP reconstruction can be found in Section 6.2.1, Section 9 and Appendix D of https://tools.ietf.org/html/rfc8618[RFC8618].

=== Configuring _compactor_ daemon startup

All binary packages of _compactor_ include startup setup allowing
_compactor_ to be run as a daemon, and possibly started
automatically on boot.

These startup setups may also contain settings constraining the
compactor's use of memory and CPU.

==== Linux with `systemd`

By default, http://releases.ubuntu.com/16.04/[Ubuntu 16.04 LTS 'Xenial
Xerus'] and later releases use `systemd`.

===== Running as a daemon

Binary packages for Ubuntu include a `systemd` service file with
the setup information required to run _compactor_ as a daemon.

When installing on Debian-based systems such as Ubuntu, installing the package
will automatically enable the service and attempt to start _compactor_ , or restart
it if already running.

To enable the service, use the `systemctl enable` subcommand.

----
# systemctl enable dns-stats-compactor
----

To start or stop the daemon, or request it reload its configuration, use the
appropriate `systemctl` subcommand.

===== Changing resource restrictions

This file includes `CPUAffinity` and `MemoryLimit` clauses to restrict
_compactor_ to particular CPUs and limit its memory usage. In the
installed service file, these are set to CPU 0 only and 1Gb
respectively.

[source,ini]
----
[Service]
CPUAffinity=0
MemoryLimit=1G
----

To override these, use the `systemctl edit` subcommand to create a service
file override unit with an updated version of the above snippet.
