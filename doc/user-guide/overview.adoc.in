== Overview

=== About

The DNS-STATS Compactor project is a suite of applications for
capturing and working with DNS traffic to a DNS nameserver. It stores
DNS traffic data in Compacted-DNS (C-DNS), a space-efficient format
defined in https://tools.ietf.org/html/rfc8618[RFC8618].

The project was initially developed for for
https://www.icann.org[ICANN] by https://www.sinodun.com[Sinodun IT],
and is now released via DNS-STATS as an open source project licenced
under the https://mozilla.org/MPL/2.0[Mozilla Public License v2.0].

For more information about DNS-STATS and the Compactor see the
http://dns-stats.org/[DNS-STATS website].

=== DNS-STATS Compactor

The DNS-STATS Compactor suite currently comprises two programs:

* _compactor_. Similar in usage to the well-known
  http://www.tcpdump.org[_tcpdump_] utility, _compactor_ reads traffic
  from one or more network interfaces (or a DNSTAP socket) and writes selected details to
  C-DNS and PCAP output files. _compactor_ can also read and convert
  pre-recorded PCAP files or DNSTAP files.
* _inspector_. Reconstructs network traffic from C-DNS files produced
  by _compactor_. It outputs one or more PCAP files suitable for
  direct inspection or input to existing analysis tools. See
  <<running.adoc#reconstructed_pcap_files,Reconstructed PCAP files>> for
  limitations on the reconstruction. Alternatively, _inspector_ can be used
  to convert C-DNS files to text, based on a user-specified template.

_compactor_ is resource efficient, and can therefore be co-located
on a nameserver. Alternatively it can be run on a standalone server
with access to the network traffic to be recorded.

_compactor_ can be configured to produce multiple output files from a single
data source. _compactor_ can optionally compress output files using the popular
http://www.gzip.org[_gzip_] or https://tukaani.org/xz[_xz_] compression schemes.
The output file types that may be produced are:

* C-DNS.  These contain captured DNS traffic, along with some
  ancillary information, e.g. ICMP and TCP Reset counts. These files
  are significantly smaller than PCAP files containing the same
  traffic.  See <<C-DNS Format>>.
* 'Ignored' traffic. When capturing from the network, these contain captured
  non-DNS and malformed DNS packets in PCAP format. _Ignored_ traffic is not
  available when capturing from DNSTAP.
* 'Raw' traffic. When capturing from the network, these contain all packets in
  the captured traffic in PCAP format. They are similar to files produced by
  _tcpdump_. _Raw_ traffic is not available when capturing from DNSTAP.

=== C-DNS Format

Traditionally server operators and others wishing to record DNS
traffic have used network level capture tools such as `tcpdump`. While
this does produce a complete record of the traffic to and from the
server, the resulting output files are large. As the files contain a
lot of repeated data (e.g. server IP and MAC address, common port
numbers), they compress well, typically reducing in size by an order
of magnitude. This compression, however, requires notable CPU
resources to perform.

The DNS-STATS Compactor focuses on the needs of DNS operators
capturing data in environments where resources (CPU, Upload bandwidth,
etc.) are restricted.

The C-DNS file format is designed for efficiently recording DNS traffic information:

* It only captures transport level information likely to be of interest to
  a DNS operator.
* It is highly flexible and can be configured to capture only specific pieces of
  data, basic query and response information, or additional details up to the
  entire DNS payload. See <<configuring.adoc#_configuring,Configuring>>.
* It performs DNS-specific compression internally to produce files that are
  significantly smaller than raw PCAP files even when full payloads are
  captured.

==== C-DNS versioning

From version 1.0 DNS-STATS Compactor writes and reads captured traffic using the
https://tools.ietf.org/html/rfc8618[1.0 C-DNS file format] as defined in
RFC8618.

Previous versions of the DNS-STATS Compactor implemented earlier, more
contstrained versions of the draft specification. To support backwards
compatibility _inspector_ reads:

* Version 1.0 of C-DNS as described in RFC8618 and 
* The two older formats (0.2 and 0.5) used by the previous _compactor_ releases (see below for details of important differences). 

It is intended to remain backwards compatible in any future format changes.

===== _compactor_ private version and customisations

_compactor_ 1.0 and later writes C-DNS as described in
https://tools.ietf.org/html/rfc8618[RFC8618],
with the following changes:

* A private version ID of 3 is present.
* Some _compactor_ implementation-specific entries are added
  to several C-DNS maps (see RFC section 7.1). They are listed below
  with their _compactor_ key values in parenthesis.
** _CollectionParameters_:
*** _compactor-dns-port_ (-1): specifies the configured port on which
    _compactor_ listened for traffic.
** _BlockPreamble_:
*** _compactor-end-time_ (-1): if the block rolled over (i.e. a new incoming data caused
    collection to begin a new block), the timestamp of that new data is recorded as
    the end time of the (older) block. If collection from an interface or DNSTAP stops, the time
    collection stops is recorded as the end time of the block.  No end
    time is recorded when reading a PCAP or DNSTAP file.
*** _compactor-start-time_ (-2): if the block rolled over (i.e. a new incoming data caused
    collection to begin a new block), the timestamp of that new data is recorded as
    the start time of the (newer) block. If collection from an interface or DNSTAP starts, the time
    collection starts is recorded as the start time of the block. No start
    time is recorded when reading a PCAP or DNSTAP file.
** _BlockStatistics_:
*** _compactor-non-dns-packets_ (-1): count of the number of received packets that
    could not be interpreted as DNS packets.
*** _compactor-out-of-order-packets_ (-2): count of the number of received packets that
    were not received by _compactor_ in strict chronological order.
*** _compactor-missing-pairs_ (-3): count of output query/response pairs not written
    by _compactor_ because they could not be processed quickly enough.
*** _compactor-missing-packets_ (-4): count of output raw PCAP packets not written
    by _compactor_ because they could not be processed quickly enough.
*** _compactor-missing-non-dns_ (-5): count of output ignored PCAP packets not written
    by _compactor_ because they could not be processed quickly enough.
*** _compactor-packets_ (-6): total packets received by compactor
*** _compactor-missing-received_ (-7): count of packets sniffed from the network not processed
    by _compactor_ because they could not be processed quickly enough.
*** _compactor-discarded-packets_ (-8): count of packets actively discarded by compactor due
    to some processing threshold, e.g. sampling.
*** _compactor-missing_matcher_ (-9): count of packets unmatched packets not written
    by _compactor_ because they could not be processed for matching quickly enough.
*** _pcap-packets_ (-10): informational only report from pcap library - count of packets received
*** _pcap-missing-if_ (-11): informational only report from pcap library - count of packets dropped at the interface
*** _pcap-missing-os_ (-12): informational only report from pcap library - count of packets dropped in the kernel

[IMPORTANT]
====
The current release does not support the following facilities defined in the RFC:

* Malformed packet data recorded directly into C-DNS.
* `response-processing-data` field

In addition, note that the `qr-type` field is only present when reading from DNSTAP.
====

===== Changes in version 1.0 DNS-STATS Compactor

One significant change between the draft C-DNS specification used in earlier
version of the DNS-STATS Compactor and the RFC8618 specification used in version
1.0 and later is that virtually every piece of data is now optional to capture.
In contrast, the earlier versions required a fixed subset of data to always be
captured with the option to include additional data. Whilst adding flexibility
to the format is also adds some complexity in terms of configuration and PCAP
regeneration.

Several things should be noted as a result of specification update:

* The default behaviour in terms of which data is collected will not change in 1.0 DNS-STATS Compactor, all additional sections are still collected.
* The use of *include* options to capture additional data is deprecated in 1.0 and will be removed in a future release. Users can instead use the more flexible *excluded_fields* file to better customise catpured data (see <<excludes>>)
* For 1.0 C-DNS files that capture less than the minimum subset of data defined in the 0.2 and 0.5 versions, PCAP regeneration becomes more complex and requires some default values to generate sane PCAPS (see <<default_values>>). 

An overview of the 1.0 processing flow is shown below.

image::overview.png[]

==== General purpose compression
DNS-STATS Compactor provides options to then compress the C-DNS files using
general purpose compression, producing files that are typically less than half
the size of compressed raw PCAP files, while using a fraction of the CPU
resources used by compressing raw PCAP.

=== Support

Bug reports and feature requests can be submitted via the issue tracker:
https://github.com/dns-stats/compactor/issues

Known Issues are documented at
https://github.com/dns-stats/compactor/blob/master/KNOWN_ISSUES.txt

A mailing list is available for users:
https://mm.dns-stats.org/mailman/listinfo/dns-stats-users
